import pygame
import time
import threading
import tkinter as tk
from tkinter import messagebox
import random
pygame.font.init()
print(
    "This gaming platform has multiple games like\n-> Guess the Word\n-> GK Quiz\n-> Sudoku\n"
)

i = int(
    input(
        "Choose 1 for Guess the Word\nChoose 2 for GK Quiz\nChoose 3 for Sudoku\n"
    ))

if i == 1:
  # Code for Guess the Word game
  
  pygame.init()

  class GuessTheWordGame:

    def __init__(self, root):
      self.root = root
      self.root.title("Guess the Word Game")

      self.words = [
          'butterfly', 'candle', 'fire', 'coin', 'barber', 'mercury', 'bank',
          'footsteps', 'clock', 'trouble', 'future', 'ice cube', 'record','memory','computer','keyboard','mouse','headphones','monitor','glasses','shoes','shirt','pants','sweater'
      ]

      self.score = 0
      self.attempts = 3

      self.word_to_guess = ""
      self.jumbled_word = ""

      self.create_widgets()

    def choose_random_word(self):
      return random.choice(self.words)

    def jumble_word(self, word):
      return ''.join(random.sample(word, len(word)))

    def update_display(self):
      self.word_label.config(text=self.jumbled_word)
      self.score_label.config(text=f"Score: {self.score}")
      self.attempts_label.config(text=f"Attempts left: {self.attempts}")

    def check_guess(self, guess):
      if guess == self.word_to_guess:
        messagebox.showinfo("Correct",
                            "Congratulations! You guessed the word.")
        self.score += 1
        self.new_round()
      else:
        self.attempts -= 1
        if self.attempts == 0:
          messagebox.showinfo(
              "Game Over",
              f"Sorry, you've run out of attempts. The correct word was {self.word_to_guess}. Your final score is {self.score}."
          )
          self.root.destroy()
        else:
          messagebox.showinfo(
              "Incorrect",
              f"Sorry, incorrect guess. Attempts left: {self.attempts}")

    def new_round(self):
      self.word_to_guess = self.choose_random_word()
      self.jumbled_word = self.jumble_word(self.word_to_guess)
      self.attempts = 3
      self.update_display()

    def create_widgets(self):
      self.word_label = tk.Label(self.root, text="", font=("Helvetica", 20))
      self.score_label = tk.Label(self.root,
                                  text="Score: 0",
                                  font=("Helvetica", 12))
      self.attempts_label = tk.Label(self.root,
                                     text="Attempts left: 3",
                                     font=("Helvetica", 12))
      self.guess_entry = tk.Entry(self.root, font=("Helvetica", 16))
      self.submit_button = tk.Button(self.root,
                                     text="Submit Guess",
                                     command=self.submit_guess,
                                     font=("Helvetica", 14))
      self.new_round_button = tk.Button(self.root,
                                        text="New Round",
                                        command=self.new_round,
                                        font=("Helvetica", 14))

      self.word_label.pack(pady=20)
      self.score_label.pack()
      self.attempts_label.pack()
      self.guess_entry.pack(pady=10)
      self.submit_button.pack(pady=10)
      self.new_round_button.pack(pady=10)

      self.new_round()

    def submit_guess(self):
      guess = self.guess_entry.get().lower()
      self.check_guess(guess)
      self.guess_entry.delete(0, tk.END)

  if __name__ == "_main_":
    bg = pygame.mixer.Sound('snak.mp3')
    bg.play()
    root = tk.Tk()
    game = GuessTheWordGame(root)
    root.mainloop()
elif i == 2:

  class QuizApp:

    def __init__(self, master):
      self.master = master
      self.master.title("Quiz App")
      self.master.geometry("600x400")

      self.levels = [{
          "time_per_question":
          10,
          "questions": [{
              "question_text": [
                  "1.Who was the first Prime Minister of India ",
                  "\na.indira Gandhi", "\nb.Narendra Modi",
                  "\nc.Jawaharlal Nehru", "\nd.Rajiv Gandhi"
              ],
              "correct_answer":
              "c"
          }, {
              "question_text": [
                  "2.What is the capitalof india", '\n'
                  "a.delhi", "b.mumbai", "c.goa", "d.kolata"
              ],
              "correct_answer":
              "a"
          }, {
              "question_text": [
                  "3.Which state is also known as the “Fruit Bowl” of India?",
                  "\na.Jammu and Kashmir", "\nb.Himachal Pradesh", "\nc.Assam",
                  "\nd.Meghalaya"
              ],
              "correct_answer":
              "b"
          }, {
              "question_text": [
                  "4.Where is Taj Mahal located in India?", "\na.New Delhi",
                  "\nb.Kolkata", "\nc.Agra", "\nd.Lucknow"
              ],
              "correct_answer":
              "c"
          }, {
              "question_text": [
                  "5.Who is the current President of India?",
                  "\na.Ram Nath Kovind", "\nb.Pranab Mukherjee",
                  "\nc.A. P. J. Abdul Kalam", "\nd.Pratibha Patil"
              ],
              "correct_answer":
              "a"
          }, {
              "question_text": [
                  "1. What is the capital of Maharashtra?", "a.Mumbai",
                  "b.New Delhi", "c.Chennai", "d.None of the above"
              ],
              "correct_answer":
              "a"
          }, {
              "question_text": [
                  "2. Which is the capital of Karnataka?", "a.banglore",
                  "b.mysore", "c.Mangalore", "d.None of the above"
              ],
              "correct_answer":
              "a"
          }, {
              "question_text": [
                  "3. Which is the capital of tamil nadu?", "a.banglore",
                  "b.mysore", "c.chennai", "d.None of the above"
              ],
              "correct_answer":
              "c"
          }, {
              "question_text": [
                  "4. Which is the capital of uttrakhand?", "a.haldwani",
                  "b.dehradun", "c.nainital", "d.None of the above"
              ],
              "correct_answer":
              "b"
          }, {
              "question_text": [
                  "5. Which is the capital of uttar pradesh?", "a.bihar",
                  "b.lucknow", "c.Mangalore", "d.None of the above"
              ],
              "correct_answer":
              "b"
          }, {
              "question_text": [
                  "6.. Which is the capital of arunanchal pradesh?",
                  "a.itanagar", "b.mysore", "c.ranchi", "d.None of the above"
              ],
              "correct_answer":
              "a"
          }, {
              "question_text": [
                  "7. Which is the capital of bihar?", "a.patna", "b.panaji",
                  "c.dispur", "d.None of the above"
              ],
              "correct_answer":
              "a"
          }, {
              "question_text": [
                  "8. Which is the capital of manipur?", "a.imphal",
                  "b.shillong", "c.aizwal", "d.None of the above"
              ],
              "correct_answer":
              "a"
          }, {
              "question_text": [
                  "9. Which is the capital of meghalaya?", "a.banglore",
                  "b.mysore", "c.shillong", "d.None of the above"
              ],
              "correct_answer":
              "a"
          }, {
              "question_text": [
                  "10. Which is the capital of mizoram?", "a.aizwal",
                  "b.mysore", "c.shillong", "d.None of the above"
              ],
              "correct_answer":
              "a"
          }]
      }
                     # Add questions for other levels as needed
                     ]

      self.level = 0
      self.score = 0
      self.current_question_index = 0

      self.create_widgets()

    def create_widgets(self):
      self.label = tk.Label(self.master,
                            text="Welcome to the Quiz!",
                            font=("Arial", 16))
      self.label.pack(pady=10)

      self.question_label = tk.Label(self.master, text="", font=("Arial", 14))
      self.question_label.pack(pady=10)

      self.answer_entry = tk.Entry(self.master, font=("Arial", 12))
      self.answer_entry.pack(pady=10)

      self.timer_label = tk.Label(self.master, text="", font=("Arial", 12))
      self.timer_label.pack()

      self.submit_button = tk.Button(self.master,
                                     text="Submit Answer",
                                     command=self.check_answer)
      self.submit_button.pack(pady=10)

      self.next_button = tk.Button(self.master,
                                   text="Next Question",
                                   command=self.next_question,
                                   state=tk.DISABLED)
      self.next_button.pack(pady=10)

      self.update_question()

    def update_question(self):
      if self.level < len(self.levels):
        level_info = self.levels[self.level]
        level_questions = level_info["questions"]
        if self.current_question_index < len(level_questions):
          question = level_questions[self.current_question_index]
          self.question_label.config(text=question["question_text"])
          self.answer_entry.delete(0, tk.END)
          self.submit_button.config(state=tk.NORMAL)
          self.next_button.config(state=tk.DISABLED)
          self.start_timer(level_info["time_per_question"])
        else:
          self.level += 1
          self.current_question_index = 0
          self.update_question()
      else:
        self.show_result()

    def start_timer(self, seconds):
      self.timer_seconds = seconds
      self.timer_running = True
      self.timer_thread = threading.Thread(target=self.timer_countdown)
      self.timer_thread.start()

    def timer_countdown(self):
      for seconds in range(self.timer_seconds, 0, -1):
        if not self.timer_running:
          break
        self.timer_label.config(text=f"Time left: {seconds}s")
        time.sleep(1)
      self.timer_label.config(text="Time's up!")
      self.timer_running = False
      self.disable_input()

    def disable_input(self):
      self.submit_button.config(state=tk.DISABLED)
      self.next_button.config(state=tk.NORMAL)

    def check_answer(self):
      self.timer_running = False  # Stop the timer
      user_answer = self.answer_entry.get().strip().lower()
      correct_answer = self.levels[self.level]["questions"][
          self.current_question_index]["correct_answer"]

      if user_answer == correct_answer:
        messagebox.showinfo("Correct", "Your answer is correct!")
        self.score += 1
      else:
        messagebox.showinfo(
            "Incorrect",
            f"Sorry, the correct answer is {correct_answer.upper()}.")

      self.disable_input()

    def next_question(self):
      self.current_question_index += 1
      self.update_question()

    def show_result(self):
      messagebox.showinfo(
          "Quiz Finished",
          f"Quiz Finished!\nYour final score is {self.score}/{sum(len(level['questions']) for level in self.levels)}"
      )
      self.master.destroy()

  def main():
    root = tk.Tk()
    app = QuizApp(root)
    root.mainloop()

  if __name__ == "__main__":
    main()

elif i == 3:
  # Code for Sudoku game
  import pygame
  pygame.font.init()
  Window = pygame.display.set_mode((500, 500))
  pygame.display.set_caption("SUDOKU GAME by DataFlair")
  x = 0
  z = 0
  diff = 500 / 9
  value = 0
  defaultgrid = [
      [0, 0, 4, 0, 6, 0, 0, 0, 5],
      [7, 8, 0, 4, 0, 0, 0, 2, 0],
      [0, 0, 2, 6, 0, 1, 0, 7, 8],
      [6, 1, 0, 0, 7, 5, 0, 0, 9],
      [0, 0, 7, 5, 4, 0, 0, 6, 1],
      [0, 0, 1, 7, 5, 0, 9, 3, 0],
      [0, 7, 0, 3, 0, 0, 0, 1, 0],
      [0, 4, 0, 2, 0, 6, 0, 0, 7],
      [0, 2, 0, 0, 0, 7, 4, 0, 0],
  ]

  font = pygame.font.SysFont("comicsans", 40)
  font1 = pygame.font.SysFont("comicsans", 20)

  def cord(pos):
    global x
    x = pos[0] // diff
    global z
    z = pos[1] // diff

  def highlightbox():
    for k in range(2):
      pygame.draw.line(Window, (0, 0, 0), (x * diff - 3, (z + k) * diff),
                       (x * diff + diff + 3, (z + k) * diff), 7)
      pygame.draw.line(Window, (0, 0, 0), ((x + k) * diff, z * diff),
                       ((x + k) * diff, z * diff + diff), 7)

  def drawlines():
    for i in range(9):
      for j in range(9):
        if defaultgrid[i][j] != 0:
          pygame.draw.rect(Window, (255, 255, 0),
                           (i * diff, j * diff, diff + 1, diff + 1))
          text1 = font.render(str(defaultgrid[i][j]), 1, (0, 0, 0))
          Window.blit(text1, (i * diff + 15, j * diff + 15))
    for l in range(10):
      if l % 3 == 0:
        thick = 7
      else:
        thick = 1
      pygame.draw.line(Window, (0, 0, 0), (0, l * diff), (500, l * diff),
                       thick)
      pygame.draw.line(Window, (0, 0, 0), (l * diff, 0), (l * diff, 500),
                       thick)

  def fillvalue(value):
    text1 = font.render(str(value), 1, (0, 0, 0))
    Window.blit(text1, (x * diff + 15, z * diff + 15))

  def raiseerror():
    text1 = font.render("wrong!", 1, (0, 0, 0))
    Window.blit(text1, (20, 570))

  def raiseerror1():
    text1 = font.render("wrong ! enter a valid key for the game", 1, (0, 0, 0))
    Window.blit(text1, (20, 570))

  def validvalue(m, k, l, value):
    for it in range(9):
      if m[k][it] == value:
        return False
      if m[it][l] == value:
        return False
    it = k // 3
    jt = l // 3
    for k in range(it * 3, it * 3 + 3):
      for l in range(jt * 3, jt * 3 + 3):
        if m[k][l] == value:
          return False
    return True

  def solvegame(defaultgrid, i, j):

    while defaultgrid[i][j] != 0:
      if i < 8:
        i += 1
      elif i == 8 and j < 8:
        i = 0
        j += 1
      elif i == 8 and j == 8:
        return True
    pygame.event.pump()
    for it in range(1, 10):
      if validvalue(defaultgrid, i, j, it) == True:
        defaultgrid[i][j] = it
        global x, z
        x = i
        z = j
        Window.fill((255, 255, 255))
        drawlines()
        highlightbox()
        pygame.display.update()
        pygame.time.delay(20)
        if solvegame(defaultgrid, i, j) == 1:
          return True
        else:
          defaultgrid[i][j] = 0
        Window.fill((0, 0, 0))

        drawlines()
        highlightbox()
        pygame.display.update()
        pygame.time.delay(50)
    return False

  def gameresult():
    text1 = font.render("game finished", 1, (0, 0, 0))
    Window.blit(text1, (20, 570))

  flag = True
  flag1 = 0
  flag2 = 0
  rs = 0
  error = 0

  while flag:
    Window.fill((255, 182, 193))
    for event in pygame.event.get():
      if event.type == pygame.QUIT:
        flag = False
      if event.type == pygame.MOUSEBUTTONDOWN:
        flag1 = 1
        pos = pygame.mouse.get_pos()
        cord(pos)
      if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_LEFT:
          x -= 1
          flag1 = 1
        if event.key == pygame.K_RIGHT:
          x += 1
          flag1 = 1
        if event.key == pygame.K_UP:
          y -= 1
          flag1 = 1
        if event.key == pygame.K_DOWN:
          y += 1
          flag1 = 1
        if event.key == pygame.K_1:
          value = 1
        if event.key == pygame.K_2:
          value = 2
        if event.key == pygame.K_3:
          value = 3
        if event.key == pygame.K_4:
          value = 4
        if event.key == pygame.K_5:
          value = 5
        if event.key == pygame.K_6:
          value = 6
        if event.key == pygame.K_7:
          value = 7
        if event.key == pygame.K_8:
          value = 8
        if event.key == pygame.K_9:
          value = 9
        if event.key == pygame.K_RETURN:
          flag2 = 1
        if event.key == pygame.K_r:
          rs = 0
          error = 0
          flag2 = 0
          defaultgrid = [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0]]
        if event.key == pygame.K_d:
          rs = 0
          error = 0
          flag2 = 0
          defaultgrid = [
              [0, 0, 4, 0, 6, 0, 0, 0, 5],
              [7, 8, 0, 4, 0, 0, 0, 2, 0],
              [0, 0, 2, 6, 0, 1, 0, 7, 8],
              [6, 1, 0, 0, 7, 5, 0, 0, 9],
              [0, 0, 7, 5, 4, 0, 0, 6, 1],
              [0, 0, 1, 7, 5, 0, 9, 3, 0],
              [0, 7, 0, 3, 0, 0, 0, 1, 0],
              [0, 4, 0, 2, 0, 6, 0, 0, 7],
              [0, 2, 0, 0, 0, 7, 4, 0, 0],
          ]
    if flag2 == 1:
      if solvegame(defaultgrid, 0, 0) == False:
        error = 1
      else:
        rs = 1
      flag2 = 0
    if value != 0:
      fillvalue(value)
      if validvalue(defaultgrid, int(x), int(z), value) == True:
        defaultgrid[int(x)][int(z)] = value
        flag1 = 0
      else:
        defaultgrid[int(x)][int(z)] = 0
        raiseerror1()
      value = 0

    if error == 1:
      raiseerror()
    if rs == 1:
      gameresult()
    drawlines()
    if flag1 == 1:
      highlightbox()
    pygame.display.update()

  pygame.quit()
